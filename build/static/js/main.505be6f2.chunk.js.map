{"version":3,"sources":["Moje/BigForm.js","Moje/CustomContainer.js","Game/Auth/AddUser.js","Game/ComponentsStartView/ReadingLinkCard.js","Game/ComponentsStartView/MultiplicationLinkCard.js","Context.js","Game/StartView.js","Game/ComponentsPolish/Exercise.js","Game/ComponentsPolish/Buttons.js","Game/Polish.js","Game/ComponentsMath/Exercise.js","Game/ComponentsMath/Buttons.js","Game/Math.js","Game/Utils/RouteParams.js","App.js","reportWebVitals.js","Game/Exercises/MathMultiplication.js","Game/Exercises/MathMultiplicationSpecificNumber.js","Game/Exercises/polishReading.js","Provider.js","index.js"],"names":["GreenSwitch","withStyles","switchBase","color","green","backgroundColor","checked","track","Switch","BigForm","useState","name","surname","email","remember","day","hour","reason","gender","button","formData","setFormData","handleData","target","console","log","type","prevState","value","Typography","component","variant","align","data-testid","Grid","container","spacing","item","xs","sm","lg","TextField","fullWidth","label","onInput","id","FormControlLabel","control","Checkbox","onClick","md","FormControl","InputLabel","Select","role","labelId","onChange","MenuItem","multiple","renderValue","selected","join","indexOf","ListItemText","primary","map","val","FormLabel","RadioGroup","aria-label","Radio","FormGroup","Button","ButtonGroup","useStyle","makeStyles","theme","paper","padding","CustomContainer","CssBaseline","Container","fixed","Paper","className","elevation","AddUser","props","data","methods","constants","getUserId","a","axios","post","API_URL","setUserId","useEffect","userId","to","useStyles","root","maxWidth","media","height","ReadingLinkCard","classes","Card","CardActionArea","CardHeader","title","subheader","Link","href","CardMedia","Skeleton","width","CardContent","CardActions","MultiplicationLinkCard","i","setI","j","setJ","max","setMax","maxValues","ijValues","ii","push","e","Context","createContext","margin","StartView","ContextData","useContext","useParams","user","alignItems","justify","exercise","fontSize","quest","fontWeight","Exercise","text","question","answers","correctAnswer","display","flexDirection","minWidth","lineHeight","buttonChecked","icon","refresh","position","right","bottom","zIndex","Buttons","answer","setAnswer","setChecked","handleActiveExercise","buttons","handleAnswerButtonsClick","style","empty","correct","border","wrong","Polish","handleGenerateExercises","setCorrectAnswer","answerClass","first","sign","second","result","numbers","handlePostAnswer","toString","length","Math","postAnswer","RouteParams","params","location","useLocation","setRouterParams","minHeight","justifyContent","overflow","App","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","mathMultiplicationGenerateExercises","firstColumn","secondColumn","mathMultiplicationSpecificNumberGenerateExercises","exercises","proste","polishReadingExercises","MyProvider","exercisesList","setExercisesList","setExercise","visit","setVisit","category","subcategory","routerParams","window","isAnswerCorrect","_","sample","postVisit","isCorrect","visitId","setTimeout","Provider","subject","children","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.505be6f2.chunk.js","sourcesContent":["/*\r\n* TODO:\r\n*  napisac jakas automatyczna walidacje\r\n* */\r\n\r\nimport React, {useState} from \"react\";\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { green } from '@material-ui/core/colors';\r\n\r\nimport {FormControl, FormLabel, Grid, Radio, Typography} from \"@material-ui/core\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {MenuOpen} from \"@material-ui/icons\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\n\r\nconst GreenSwitch = withStyles({\r\n    switchBase: {\r\n        color: green[300],\r\n        '&$checked': {\r\n            color: green[500],\r\n        },\r\n        '&$checked + $track': {\r\n            backgroundColor: green[500],\r\n        },\r\n    },\r\n    checked: {},\r\n    track: {},\r\n})(Switch)\r\n\r\nconst BigForm = () => {\r\n\r\n    const [formData, setFormData] = useState({\r\n        name: '',\r\n        surname: '',\r\n        email: '',\r\n        remember: true,\r\n        day: '',\r\n        hour: [],\r\n        reason: [],\r\n        gender: '',\r\n        color: '',\r\n        button: '',\r\n    })\r\n\r\n    const handleData = ({target}) => {\r\n\r\n        console.log(target)\r\n\r\n        if (target.type === 'checkbox' && target.name !== 'color') {\r\n            setFormData(prevState => ({\r\n                ...prevState,\r\n                [target.name]: !prevState[target.name]\r\n            }))\r\n        } else {\r\n            setFormData(prevState => ({\r\n                ...prevState,\r\n                [target.name]: target.value\r\n            }))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Typography\r\n                component={\"h1\"}\r\n                variant={\"h4\"}\r\n                align={\"center\"}\r\n            >\r\n                Big Form\r\n            </Typography>\r\n            <form data-testid=\"form\">\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} sm={6} lg={4}>\r\n                        <TextField\r\n                            fullWidth\r\n                            name={'name'}\r\n                            label={'name'}\r\n                            onInput={handleData}\r\n                            value={formData.name}\r\n                        />\r\n\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} lg={4}>\r\n                        <TextField\r\n                            fullWidth\r\n                            name={'surname'}\r\n                            label={'surname'}\r\n                            onInput={handleData}\r\n                            value={formData.surname}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} lg={4}>\r\n                        <TextField\r\n                            fullWidth\r\n                            name={'email'}\r\n                            label={'email'}\r\n                            onInput={handleData}\r\n                            value={formData.email}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} sm={6} lg={4}>\r\n                        <Typography id={'name-text'} component={'p'} variant={\"h6\"}>\r\n                            {formData.name}\r\n                        </Typography>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} lg={4}>\r\n                        <Typography component={'p'} variant={\"h6\"}>\r\n                            {formData.surname}\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} lg={4}>\r\n                        <Typography component={'p'} variant={\"h6\"}>\r\n                            {formData.email}\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                    <FormControlLabel\r\n                        control={\r\n                            <Checkbox\r\n                                checked={formData.remember}\r\n                                color={\"primary\"}\r\n                                value={'remember'}\r\n                                name={'remember'}\r\n                                onClick={handleData}\r\n                            />\r\n                        }\r\n                        label=\"Remember me!\"\r\n                    />\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} sm={6} md={4}>\r\n                        <FormControl\r\n                            fullWidth\r\n                        >\r\n                            {/*TODO zwykły select*/}\r\n                            <InputLabel id={'day-label'}>Day</InputLabel>\r\n                            <Select\r\n                                role={'listbox'}\r\n                                name={'day'}\r\n                                labelId={'day-label'}\r\n                                id={'select-day'}\r\n                                onChange={handleData}\r\n                                value={formData.day}\r\n                            >\r\n                                <MenuItem value={1}>Monday</MenuItem>\r\n                                <MenuItem value={2}>Tuesday</MenuItem>\r\n                                <MenuItem value={3}>Wednesday</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4}>\r\n                        <FormControl fullWidth>\r\n                            <InputLabel id={'hour-label'}>Hour</InputLabel>\r\n                            <Select\r\n                                multiple\r\n                                role={'listbox'}\r\n                                name={'hour'}\r\n                                labelId={'hour-label'}\r\n                                id={'select-hour'}\r\n                                onChange={handleData}\r\n                                value={formData.hour}\r\n                            >\r\n                                <MenuItem value={12}>12</MenuItem>\r\n                                <MenuItem value={13}>13</MenuItem>\r\n                                <MenuItem value={14}>14</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} md={4}>\r\n                        <FormControl fullWidth>\r\n                            <InputLabel id={'reason-label'}>Reason</InputLabel>\r\n                            <Select\r\n                                multiple\r\n                                role={'listbox'}\r\n                                name={'reason'}\r\n                                labelId={'reason-label'}\r\n                                id={'select-reason'}\r\n                                onChange={handleData}\r\n                                value={formData.reason}\r\n                                renderValue={(selected) => selected.join(', ')}\r\n                            >\r\n                                <MenuItem value={'appointment'}>\r\n                                    <Checkbox checked={formData.reason.indexOf('appointment') > -1}/>\r\n                                    <ListItemText primary={'appointment'}/>\r\n                                </MenuItem>\r\n                                <MenuItem value={'special offer'}>\r\n                                    <Checkbox checked={formData.reason.indexOf('special offer') > -1}/>\r\n                                    <ListItemText primary={'special offer'}/>\r\n                                </MenuItem>\r\n                                <MenuItem value={'test'}>\r\n                                    <Checkbox checked={formData.reason.indexOf('test') > -1}/>\r\n                                    <ListItemText primary={'test'}/>\r\n                                </MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} sm={6} lg={4}>\r\n                        <Typography id={'name-text'} component={'p'} variant={\"h6\"}>\r\n                            {formData.day}\r\n                        </Typography>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} lg={4}>\r\n                        <Typography component={'p'} variant={\"h6\"}>\r\n                            {\r\n                                formData.hour.map(val => val + ', ')\r\n                            }\r\n                        </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} lg={4}>\r\n                        <Typography component={'p'} variant={\"h6\"}>\r\n                            {\r\n                                formData.reason.map(val => val + ', ')\r\n                            }\r\n                        </Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} sm={6} lg={4}>\r\n                        <FormControl fullWidth component={'fieldset'}>\r\n                            <FormLabel component={'legend'}>Gender</FormLabel>\r\n                            <RadioGroup\r\n                                aria-label={'gender'}\r\n                                name={'gender'}\r\n                                value={formData.gender}\r\n                                onChange={handleData}\r\n                            >\r\n                                <FormControlLabel value={'female'} control={<Radio/>} label={'Female'}/>\r\n                                <FormControlLabel value={'male'} control={<Radio/>} label={'Male'}/>\r\n                            </RadioGroup>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} lg={4}>\r\n                        <FormGroup>\r\n                            <FormControlLabel control={\r\n                                <Switch\r\n                                    name={'color'}\r\n                                    color={''}\r\n                                    value={'red'}\r\n                                    onChange={handleData}\r\n                                    checked={formData.color === 'red'}\r\n                                />}\r\n                                              label={'Red'}\r\n                            />\r\n                            <FormControlLabel control={\r\n                                <Switch\r\n                                    name={'color'}\r\n                                    color={''}\r\n                                    value={'blue'}\r\n                                    onChange={handleData}\r\n                                    checked={formData.color === 'blue'}\r\n                                />}\r\n                                              label={'Blue'}\r\n                            />\r\n                            <FormControlLabel control={\r\n                                <GreenSwitch\r\n                                    name={'color'}\r\n                                    color={''}\r\n                                    value={'green'}\r\n                                    onChange={handleData}\r\n                                    checked={formData.color === 'green'}\r\n                                />}\r\n                                              label={'Green'}\r\n                            />\r\n                        </FormGroup>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6} lg={4}>\r\n                        <Button variant=\"outlined\" color={\"inherit\"} onClick={()=>{handleData({name:'button',target:{value: 'button1'}})}}>Default</Button>\r\n\r\n                        <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n                            <Button onClick={()=>{handleData({target:{name:'button',value: 'button2'}})}}>One</Button>\r\n                            <Button onClick={()=>{handleData({target:{name:'button',value: 'button3'}})}}>Two</Button>\r\n                            <Button onClick={()=>{handleData({target:{name:'button',value: 'button4'}})}}>Three</Button>\r\n                        </ButtonGroup>\r\n                        {formData.button}\r\n                    </Grid>\r\n                </Grid>\r\n            </form>\r\n\r\n\r\n            {/*TODO:  SELECT\r\n                - Dodać style dla wybranych/zaznaczonych opcji\r\n                - ----- zwykły\r\n                - multi\r\n                - z inputem do wybierania\r\n            */}\r\n\r\n            {/*TODO: Dodać radioButtony */}\r\n\r\n\r\n            {/*TODO: Walidacja*/}\r\n\r\n            {/*TODO: Dodać header, footer, menu, sidebar !!!!!!!!!!!!!!  */}\r\n\r\n            {/*TODO: TESTY\r\n                 - czy istnieja inputy/chechboxy z odpowiednim namem\r\n                 - Czy istnieja komponenty np sa 3 <Textfieldy\r\n                 - Czy np formData.name === text w #name-text\r\n            */}\r\n\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default BigForm;","/*  TODO:\r\n*   Kontener w ktorym mozna umieszczac kontent : Formularz | Tabela | ??\r\n*   Użyć Paper | Grid  | Typography\r\n*\r\n*   TODO: Zrobić tabele z paginacja (dane tylko z frontu moze)\r\n* */\r\n\r\nimport React from \"react\";\r\n\r\nimport BigForm from \"./BigForm\";\r\n\r\nimport {Container, Grid, makeStyles} from \"@material-ui/core\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\n\r\nconst useStyle = makeStyles(theme => (\r\n    {\r\n        paper: {\r\n            padding: theme.spacing(2)\r\n        }\r\n    }\r\n))\r\n\r\nconst CustomContainer = () => {\r\n\r\n    const {paper} = useStyle()\r\n\r\n    return (\r\n        <>\r\n            <CssBaseline />\r\n            <Container component={'main'} fixed>\r\n                <Paper\r\n                    className={paper}\r\n                    variant={\"elevation\"}\r\n                    elevation={3}\r\n                >\r\n                    <BigForm/>\r\n                </Paper>\r\n\r\n\r\n            </Container>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default CustomContainer;","import React, {useEffect} from \"react\";\r\n\r\nimport axios from \"axios\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst AddUser = props => {\r\n\r\n    const {data} = props\r\n    const {methods} = props\r\n    const {constants} = props\r\n\r\n    const getUserId = async () => {\r\n        const {data} = await axios.post(`${constants.API_URL}dashboard/user`)\r\n        methods.setUserId(data.id)\r\n    }\r\n\r\n    useEffect(() => {\r\n        (async ()=> await getUserId())()\r\n    },[])\r\n\r\n    return (\r\n        <>\r\n            {data?.userId ? <Redirect to={`${data?.userId}`} /> : <p>----------</p>}\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default AddUser;","import React from 'react';\r\n// import {\r\n//     Link\r\n// } from \"react-router-dom\";\r\n\r\nimport Link from '@material-ui/core/Link';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\n// import Button from '@material-ui/core/Button';\r\n// import Typography from '@material-ui/core/Typography';\r\n// import IconButton from \"@material-ui/core/IconButton\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\n// import MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    media: {\r\n        height: 140,\r\n    },\r\n});\r\n\r\nconst ReadingLinkCard = ({userId}) => {\r\n    const classes = useStyles();\r\n\r\n    // const preventDefault = (event) => event.preventDefault();\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardActionArea>\r\n                <CardHeader\r\n                    // action={\r\n                    //     <IconButton aria-label=\"settings\">\r\n                    //         <MoreVertIcon />\r\n                    //     </IconButton>\r\n                    // }\r\n                    title={'Czytanie ze zrozumieniem'}\r\n                    subheader={\"Wybierz poziom trudności!\"}\r\n                />\r\n                <Link href={`#/${userId}/polski/czytanie/proste`} color={\"inherit\"}>\r\n                    {/*<CardMedia*/}\r\n                    {/*    className={classes.media}*/}\r\n                    {/*    image=\"https://picsum.photos/200/300\"*/}\r\n                    {/*/>*/}\r\n                    <CardMedia\r\n                        className={classes.media}\r\n                    >\r\n                        <Skeleton variant=\"text\" width={'100%'} height={118} />\r\n                    </CardMedia>\r\n                    <CardContent>\r\n                        {/*<Typography gutterBottom variant=\"h5\" component=\"h2\">*/}\r\n                        {/*    Lizard*/}\r\n                        {/*</Typography>*/}\r\n                        {/*<Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">*/}\r\n                        {/*    Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging*/}\r\n                        {/*    across all continents except Antarctica*/}\r\n                        {/*</Typography>*/}\r\n                    </CardContent>\r\n                </Link>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                {/*<Button size=\"small\" color=\"primary\">*/}\r\n                {/*    Share*/}\r\n                {/*</Button>*/}\r\n                {/*<Button size=\"small\" color=\"primary\">*/}\r\n                {/*    Learn More*/}\r\n                {/*</Button>*/}\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default ReadingLinkCard;","import React, {useState} from 'react';\r\n// import {\r\n//     Link\r\n// } from \"react-router-dom\";\r\n\r\nimport Link from '@material-ui/core/Link';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\n// import Button from '@material-ui/core/Button';\r\n// import Typography from '@material-ui/core/Typography';\r\n// import IconButton from \"@material-ui/core/IconButton\";\r\nimport CardHeader from \"@material-ui/core/CardHeader\";\r\n// import MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\n// import TextField from \"@material-ui/core/TextField\";\r\nimport {FormControl} from \"@material-ui/core\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    media: {\r\n        height: 140,\r\n    },\r\n});\r\n\r\nconst MultiplicationLinkCard = ({userId}) => {\r\n    const classes = useStyles();\r\n\r\n    const [i,setI] = useState(1)\r\n    const [j,setJ] = useState(1)\r\n    const [max,setMax] = useState(100)\r\n\r\n    // const preventDefault = (event) => event.preventDefault();\r\n\r\n    let maxValues = []\r\n    let ijValues = []\r\n    for (let ii = 1; ii<=100; ii++){\r\n        maxValues.push(ii)\r\n        if(ii<=10){\r\n            ijValues.push(ii)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardActionArea>\r\n                <CardHeader\r\n                    // action={\r\n                    //     <IconButton aria-label=\"settings\">\r\n                    //         <MoreVertIcon />\r\n                    //     </IconButton>\r\n                    // }\r\n                    title={'Mnożenie'}\r\n                    subheader={\"Ustaw zakres działań!\"}\r\n                />\r\n                <Link href={`#/${userId}/matematyka/mnozenie/${max}/${i}/${j}`} color={\"inherit\"}>\r\n                    {/*<CardMedia*/}\r\n                    {/*    className={classes.media}*/}\r\n                    {/*    image=\"https://picsum.photos/200/300\"*/}\r\n                    {/*/>*/}\r\n                    <CardMedia\r\n                        className={classes.media}\r\n                    >\r\n                        <Skeleton variant=\"text\" width={'100%'} height={118} />\r\n                    </CardMedia>\r\n                    <CardContent>\r\n                        {/*<Typography gutterBottom variant=\"h5\" component=\"h2\">*/}\r\n                        {/*    Lizard*/}\r\n                        {/*</Typography>*/}\r\n                        {/*<Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">*/}\r\n                        {/*    Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging*/}\r\n                        {/*    across all continents except Antarctica*/}\r\n                        {/*</Typography>*/}\r\n                    </CardContent>\r\n                </Link>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                <FormControl fullWidth>\r\n                    <InputLabel id={'max-label'}>Wartość maksymalna</InputLabel>\r\n                    <Select\r\n                        role={'listbox'}\r\n                        name={'max'}\r\n                        labelId={'max-label'}\r\n                        id={'select-max'}\r\n                        onChange={(e)=>{setMax(e.target.value)}}\r\n                        value={max}\r\n                    >\r\n                        {\r\n                            maxValues.map(val=>(\r\n                                <MenuItem value={val} key={val}>{val}</MenuItem>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                <FormControl fullWidth>\r\n                    <InputLabel id={'i-label'}></InputLabel>\r\n                    <Select\r\n                        role={'listbox'}\r\n                        name={'i'}\r\n                        labelId={'i-label'}\r\n                        id={'select-i'}\r\n                        onChange={(e)=>{setI(e.target.value)}}\r\n                        value={i}\r\n                    >\r\n                        {\r\n                            ijValues.map(val=>(\r\n                                <MenuItem value={val} key={val}>{val}</MenuItem>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n\r\n                <FormControl fullWidth>\r\n                    <InputLabel id={'j-label'}></InputLabel>\r\n                    <Select\r\n                        role={'listbox'}\r\n                        name={'j'}\r\n                        labelId={'j-label'}\r\n                        id={'select-j'}\r\n                        onChange={(e)=>{setJ(e.target.value)}}\r\n                        value={j}\r\n                    >\r\n                        {\r\n                            ijValues.map(val=>(\r\n                                <MenuItem value={val} key={val}>{val}</MenuItem>\r\n                            ))\r\n                        }\r\n                    </Select>\r\n                </FormControl>\r\n\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default MultiplicationLinkCard;","import {createContext} from 'react'\r\n\r\nconst Context = new createContext()\r\n\r\nexport default Context;","import React, {useContext} from \"react\";\r\n\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\n\r\nimport {Grid} from \"@material-ui/core\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\n\r\nimport ReadingLinkCard from \"./ComponentsStartView/ReadingLinkCard\";\r\nimport MultiplicationLinkCard from \"./ComponentsStartView/MultiplicationLinkCard\";\r\nimport Context from \"../Context\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n}));\r\n\r\nconst StartView = () =>{\r\n\r\n    const {root} = useStyles();\r\n\r\n    const ContextData = useContext(Context)\r\n\r\n    // *** ROUTER PARAMS\r\n    const {user} = useParams();\r\n    // ***\r\n\r\n    return (\r\n        <Grid className={root} container alignItems={\"center\"} justify={\"center\"} spacing={1}>\r\n            <MultiplicationLinkCard userId={ContextData.data.userId} />\r\n            <ReadingLinkCard userId={ContextData.data.userId} />\r\n            {/*<ReadingLinkCard path={''} />*/}\r\n        </Grid>\r\n    )\r\n\r\n}\r\n\r\nexport default StartView;","import React from \"react\";\r\nimport {makeStyles, Typography} from \"@material-ui/core\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: '2rem',\r\n    },\r\n    exercise: {\r\n        fontSize: '3rem'\r\n    },\r\n    quest: {\r\n        fontSize: '2rem',\r\n        fontWeight: \"bolder\"\r\n    },\r\n}));\r\n\r\nconst Exercise = ({text,question,answers,correctAnswer}) => {\r\n\r\n    const {root, exercise, quest} = useStyles()\r\n\r\n    return (\r\n        <div className={root} data-testid=\"form\">\r\n            <Typography className={exercise} component={\"h2\"} align={\"left\"}>\r\n                {text}\r\n            </Typography>\r\n            <Typography className={quest} component={\"h2\"} align={\"left\"}>\r\n                {question}\r\n            </Typography>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n//TODO napisać jakies testy\r\n// * w zależnosci od propsow czy wyswietla sie to co ma\r\n\r\nExercise.propTypes = {\r\n    answer: PropTypes.string.isRequired,\r\n    text: PropTypes.string.isRequired,\r\n    question: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Exercise;","import React from \"react\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {makeStyles} from \"@material-ui/core\";\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport BackspaceIcon from '@material-ui/icons/Backspace';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    button: {\r\n        fontSize: '1.5rem',\r\n        minWidth: '2rem',\r\n        padding: '1rem',\r\n        '& span': {\r\n            lineHeight: 1\r\n        }\r\n    },\r\n    buttonChecked : {\r\n        backgroundColor: 'darkgreen'\r\n    },\r\n    icon: {\r\n        fontSize: '5rem'\r\n    },\r\n    refresh: {\r\n        position: \"absolute\",\r\n        right: '10%',\r\n        bottom: '10%',\r\n        zIndex: 10,\r\n        '& svg': {\r\n            fontSize: '4rem',\r\n        },\r\n    }\r\n}));\r\n\r\nconst Buttons = ({answers, answer, setAnswer, setChecked, handleActiveExercise})=>{\r\n\r\n    const {root, button, icon, refresh, buttonChecked} = useStyles()\r\n\r\n    const handleAnswerButtonsClick = (val) =>{\r\n        setAnswer(val)\r\n    }\r\n\r\n    const handleCheckButton = () =>{\r\n        setChecked(true)\r\n    }\r\n    const handleClearButton = () =>{\r\n        setChecked(false)\r\n        setAnswer('')\r\n    }\r\n\r\n    const buttons = answers.map((val,i)=>(\r\n        <Button\r\n            className={[button,answer===val?buttonChecked:'']}\r\n            key={i}\r\n            onClick={()=>{handleAnswerButtonsClick(val)}}\r\n        >\r\n            {val}\r\n        </Button>\r\n    ))\r\n\r\n    return (\r\n        <div className={root}>\r\n            <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\r\n                {buttons}\r\n            </ButtonGroup>\r\n            <ButtonGroup  variant=\"text\">\r\n                <Button onClick={handleCheckButton}>\r\n                    <CheckCircleIcon style={{color: 'darkgreen'}} className={icon} />\r\n                </Button>\r\n                <Button onClick={handleClearButton}>\r\n                    <BackspaceIcon style={{color: 'red'}} className={icon} />\r\n                </Button>\r\n            </ButtonGroup>\r\n\r\n            <Button className={refresh} onClick={handleActiveExercise}>\r\n                <CachedIcon color={\"primary\"}/>\r\n            </Button>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Buttons;","import React, {useEffect} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\n\r\nimport {Container, Grid, makeStyles} from \"@material-ui/core\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport Exercise from \"./ComponentsPolish/Exercise\";\r\nimport Buttons from \"./ComponentsPolish/Buttons\";\r\n\r\nconst useStyle = makeStyles(theme=>({\r\n    paper: {\r\n        padding: theme.spacing(2)\r\n    },\r\n    empty: {\r\n\r\n    },\r\n    correct: {\r\n        backgroundColor: '#0064002e',\r\n        border: '3px solid green'\r\n    },\r\n    wrong: {\r\n        backgroundColor: '#ff787878',\r\n        border: '3px solid red'\r\n    }\r\n}))\r\n\r\nconst Polish = props =>{\r\n\r\n    const classes = useStyle()\r\n    const {paper} = useStyle()\r\n\r\n    const {type,max} = useParams()\r\n\r\n    const {data} = props\r\n    const {methods} = props\r\n    const {constants} = props\r\n\r\n\r\n    useEffect(()=>{\r\n        methods.handleGenerateExercises('polski',type, max)\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        methods.setCorrectAnswer(data.exercise?.correctAnswer)\r\n    },[data.exercise])\r\n\r\n    return (\r\n        <>\r\n            <CssBaseline/>\r\n            <Container component={'main'} fixed>\r\n\r\n                {/*<UserList />*/}\r\n\r\n                <Paper\r\n                    className={paper + ' ' + classes[data.answerClass]}\r\n                    variant={\"elevation\"}\r\n                    elevation={3}\r\n                >\r\n                    { data.exercise?.text &&\r\n\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Exercise\r\n                                {...data.exercise}\r\n                                answer={data.answer}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Buttons\r\n                                answers={data.exercise.answers}\r\n                                answer={data.answer}\r\n                                setAnswer={methods.setAnswer}\r\n                                setChecked={methods.setChecked}\r\n                                handleActiveExercise={methods.handleActiveExercise}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                    }\r\n                </Paper>\r\n            </Container>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default Polish;","import React from \"react\";\r\nimport {makeStyles, Typography} from \"@material-ui/core\";\r\n\r\n// import PropTypes from 'prop-types';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: '1.5rem',\r\n    },\r\n    exercise: {\r\n        fontSize: '10rem'\r\n    }\r\n}));\r\n\r\nconst Exercise = ({first,sign,second,result, answer}) => {\r\n\r\n    const {root, exercise} = useStyles()\r\n\r\n    return (\r\n        <div className={root}>\r\n            <Typography className={exercise} component={\"h2\"} align={\"center\"}>\r\n                {first} {sign} {second} = {answer}\r\n            </Typography>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Exercise;","import React from \"react\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {makeStyles} from \"@material-ui/core\";\r\n\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport BackspaceIcon from '@material-ui/icons/Backspace';\r\nimport CachedIcon from '@material-ui/icons/Cached';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        '& > *': {\r\n            margin: theme.spacing(1),\r\n        },\r\n    },\r\n    button: {\r\n        fontSize: '2.5rem',\r\n        minWidth: '2rem',\r\n        padding: '1rem',\r\n        '& span': {\r\n            lineHeight: 1\r\n        }\r\n    },\r\n    icon: {\r\n        fontSize: '5rem'\r\n    },\r\n    refresh: {\r\n        position: \"absolute\",\r\n        right: '10%',\r\n        bottom: '10%',\r\n        zIndex: 10,\r\n        '& svg': {\r\n            fontSize: '8rem',\r\n        },\r\n    }\r\n}));\r\n\r\nconst Buttons = ({numbers,answer, setAnswer, setChecked, handleActiveExercise, handlePostAnswer})=>{\r\n\r\n    const {root, button, icon, refresh} = useStyles()\r\n\r\n    const handleAnswerButtonsClick = (val) =>{\r\n\r\n        if(answer.toString().length >= 3) return\r\n\r\n        setAnswer(answer + val)\r\n    }\r\n\r\n    const handleCheckButton = () =>{\r\n            setChecked(true)\r\n            handlePostAnswer()\r\n    }\r\n    const handleClearButton = () =>{\r\n        setChecked(false)\r\n        setAnswer('')\r\n    }\r\n\r\n    const buttons = numbers.map((val,i)=><Button className={button} key={i} onClick={()=>{handleAnswerButtonsClick(val)}}>{val}</Button>)\r\n\r\n    return (\r\n        <div className={root}>\r\n            <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\r\n                {buttons}\r\n            </ButtonGroup>\r\n            <ButtonGroup  variant=\"text\">\r\n                <Button onClick={handleCheckButton}>\r\n                    <CheckCircleIcon style={{color: 'darkgreen'}} className={icon} />\r\n                </Button>\r\n                <Button onClick={handleClearButton}>\r\n                    <BackspaceIcon style={{color: 'red'}} className={icon} />\r\n                </Button>\r\n            </ButtonGroup>\r\n\r\n            <Button className={refresh} onClick={handleActiveExercise}>\r\n                <CachedIcon color={\"primary\"}/>\r\n            </Button>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Buttons;","import React, {useEffect} from \"react\";\r\nimport {\r\n    useParams\r\n} from \"react-router-dom\";\r\n\r\nimport {Container, Grid, makeStyles} from \"@material-ui/core\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nimport Exercise from \"./ComponentsMath/Exercise\";\r\nimport Buttons from \"./ComponentsMath/Buttons\";\r\n\r\nconst useStyle = makeStyles(theme=>({\r\n    paper: {\r\n        padding: theme.spacing(2)\r\n    },\r\n    empty: {\r\n\r\n    },\r\n    correct: {\r\n        backgroundColor: '#0064002e',\r\n        border: '3px solid green'\r\n    },\r\n    wrong: {\r\n        backgroundColor: '#ff787878',\r\n        border: '3px solid red'\r\n    }\r\n}))\r\n\r\nconst Math = props =>{\r\n\r\n    const classes = useStyle()\r\n    const {paper} = useStyle()\r\n\r\n    const {type,max, i,j} = useParams()\r\n    console.log({j})\r\n\r\n    const {data} = props\r\n    const {methods} = props\r\n    const {constants} = props\r\n\r\n    const handlePostAnswer = () => {\r\n        methods.postAnswer(`${data.exercise.first} ${data.exercise.sign} ${data.exercise.second} = `)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        methods.handleGenerateExercises('matematyka',type,max,i,j)\r\n    },[])\r\n\r\n    useEffect(()=>{\r\n        methods.setCorrectAnswer(data.exercise?.result?.toString())\r\n    },[data.exercise])\r\n\r\n    return (\r\n        <>\r\n            <CssBaseline/>\r\n            <Container component={'main'} fixed>\r\n\r\n                {/*<UserList />*/}\r\n\r\n                <Paper\r\n                    className={paper + ' ' + classes[data.answerClass]}\r\n                    variant={\"elevation\"}\r\n                    elevation={3}\r\n                >\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <Exercise\r\n                                {...data.exercise}\r\n                                answer={data.answer}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Buttons\r\n                                numbers={[0,1,2,3,4,5,6,7,8,9]}\r\n                                answer={data.answer}\r\n                                setAnswer={methods.setAnswer}\r\n                                setChecked={methods.setChecked}\r\n                                handlePostAnswer={handlePostAnswer}\r\n                                handleActiveExercise={methods.handleActiveExercise}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </Container>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\nexport default Math;","import React, {useEffect} from \"react\";\r\n\r\nimport {\r\n    useParams,\r\n    useLocation\r\n} from \"react-router-dom\";\r\n\r\nconst RouteParams = props => {\r\n\r\n\r\n    const params = useParams()\r\n    const location = useLocation()\r\n    console.log({params})\r\n\r\n    // const {data} = props\r\n    const {methods} = props\r\n    // const {constants} = props\r\n\r\n    console.log({location})\r\n\r\n    useEffect(()=>{\r\n        methods.setRouterParams(params)\r\n    },[location])\r\n\r\n    return(\r\n        <></>\r\n    )\r\n\r\n}\r\n\r\nexport default RouteParams;","// TODO przepinac dynamicznie API_URL na produkcji !!!!!!!!\n\n// TODO Przeniesc dane, metody z ContextData do propsow zeby uniezaleznic komponenty i umozliwic testowanie !!!!!\n\nimport 'fontsource-roboto';\nimport React, {useContext} from \"react\";\nimport {\n    HashRouter as Router,\n    Switch,\n    Route,\n    // Link\n} from \"react-router-dom\";\nimport {makeStyles} from \"@material-ui/core\";\nimport './App.css';\n\n// import MyProvider from \"./Provider\";\n\nimport CustomContainer from \"./Moje/CustomContainer\"; //TODO xxx\nimport AddUser from \"./Game/Auth/AddUser\";\nimport StartView from \"./Game/StartView\";\nimport Polish from \"./Game/Polish\";\nimport Math from \"./Game/Math\";\nimport RouteParams from \"./Game/Utils/RouteParams\";\nimport Context from \"./Context\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minHeight: '100vh',\n        display: \"flex\",\n        justifyContent: 'center',\n        alignItems: \"center\",\n        overflow: 'hidden' //FIX bug when select hoover\n    },\n\n}));\n\nfunction App() {\n\n    const {root} = useStyles()\n\n    const ContextData = useContext(Context)\n    console.log({ContextData})\n\n    return (\n            <div className={root}>\n                {/*<LoginForm />*/}\n                {/*<SignForm />*/}\n                {/*<Checkout />*/}\n                <Router>\n\n                    {/*/TODO zrobic osobny komponent tylko do sprawdzania typów/*/}\n\n                    <Route path={'/:userId/:category?/:subcategory?'}>\n                        <RouteParams {...ContextData} />\n                    </Route>\n\n                    <Switch>\n                        <Route exact path={'/'}>\n                            <AddUser {...ContextData} />\n                            {/*//TODO przekazywac wszystko propsami, moze jakis zewnetrzny komponent Container dodac*/}\n                        </Route>\n                        <Route exact path={'/:userId'}>\n                            <StartView {...ContextData} />\n                        </Route>\n                        <Route exact path={'/:userId/matematyka/:type/:max/:i?/:j?'}>\n                            <Math {...ContextData} />\n                        </Route>\n                        <Route exact path={'/:userId/polski/:type/:max'}>\n                            <Polish {...ContextData} />\n                        </Route>\n                        <Route exact path={'/test'}>\n                            <CustomContainer {...ContextData} />\n                        </Route>\n                    </Switch>\n                </Router>\n            </div>\n\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const mathMultiplicationGenerateExercises = (max, firstColumn, secondColumn)=>{\r\n\r\n    let data = [];\r\n\r\n    for (let i=firstColumn; i <=10; i++){\r\n        for(let j=secondColumn; j <=10; j++){\r\n            if(i*j<=max){\r\n                data.push({\r\n                    first: i,\r\n                    sign: '·',\r\n                    second: j,\r\n                    result: i*j\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    return data;\r\n\r\n}\r\n\r\nexport {mathMultiplicationGenerateExercises}","const mathMultiplicationSpecificNumberGenerateExercises = (max, firstColumn, secondColumn)=>{\r\n\r\n    let data = [];\r\n\r\n        for(let j=secondColumn; j <=10; j++){\r\n            if(firstColumn*j<=max){\r\n                data.push({\r\n                    first: firstColumn,\r\n                    sign: '·',\r\n                    second: j,\r\n                    result: firstColumn*j\r\n                })\r\n            }\r\n        }\r\n\r\n    return data;\r\n\r\n}\r\n\r\nexport {mathMultiplicationSpecificNumberGenerateExercises}","const exercises = {\r\n\r\n    proste: [\r\n        {\r\n            text: 1,\r\n            question: 'Jakiego koloru jest kot?',\r\n            answers: ['czarny','biały','bury'],\r\n            correctAnswer: 'biały'\r\n        },\r\n        {\r\n            text: 'Czarny kot je z miski.',\r\n            question: 'Jakiego koloru jest kot?',\r\n            answers: ['czarny','biały','bury'],\r\n            correctAnswer: 'czarny'\r\n        },\r\n        {\r\n            text: 'Bury kot je z miski.',\r\n            question: 'Jakiego koloru jest kot?',\r\n            answers: ['czarny','biały','bury'],\r\n            correctAnswer: 'bury'\r\n        },\r\n    ]\r\n\r\n}\r\n\r\nconst polishReadingExercises = type => {\r\n    return exercises[type]\r\n}\r\n\r\nexport {polishReadingExercises}","import React, {useEffect, useState} from 'react'\r\n\r\n// import ReactDOM from \"react-dom\";\r\n// import {\r\n//     useParams\r\n// } from \"react-router-dom\";\r\n\r\nimport Context from \"./Context\";\r\nimport axios from \"axios\";\r\nimport _ from 'lodash';\r\n\r\nimport {mathMultiplicationGenerateExercises} from \"./Game/Exercises/MathMultiplication\";\r\nimport {mathMultiplicationSpecificNumberGenerateExercises} from \"./Game/Exercises/MathMultiplicationSpecificNumber\";\r\nimport {polishReadingExercises} from \"./Game/Exercises/polishReading\";\r\n\r\nconst MyProvider = (props) => {\r\n\r\n\r\n        // *** STATE\r\n\r\n        // TODO dane zwiazane z rozwiazanie zadania opakowac w jeden state ???\r\n        // ***** Exercise\r\n        const [exercisesList, setExercisesList] = useState([])\r\n        const [exercise, setExercise] = useState({})\r\n\r\n        const [answer, setAnswer] = useState('')\r\n        const [correctAnswer, setCorrectAnswer] = useState('')\r\n\r\n        const [checked, setChecked] = useState(false)\r\n\r\n        // ***** Auth\r\n        const [userId, setUserId] = useState('')\r\n        const [visit, setVisit] = useState('')\r\n\r\n\r\n        // ***** Router params\r\n\r\n        const [routerParams, setRouterParams] = useState({\r\n            userId: '',\r\n            category: '', //TODO np polski, matematyka\r\n            subcategory: '' //TODO np mnozenie, czytanie\r\n        })\r\n\r\n        // *************************************************************\r\n\r\n        // *** GETTERS\r\n\r\n        const API_URL = () => {\r\n            return window.location.href.indexOf('localhost') > 0 ? 'http://localhost:5000/' : 'https://api-class-game.2dsp35.pl/';\r\n        }\r\n\r\n        const isAnswerCorrect = () => {\r\n            return answer !== '' && answer === correctAnswer\r\n        }\r\n\r\n        const answerClass = () => {\r\n            if(checked === false){\r\n                return 'empty'\r\n            }\r\n            else if(isAnswerCorrect()){\r\n                return 'correct'\r\n            }\r\n            else{\r\n                return 'wrong'\r\n            }\r\n        }\r\n\r\n        // *************************************************************\r\n\r\n        // *** METHODS\r\n\r\n        const handleGenerateExercises = (subject,type,max,i=null,j=null)=>{\r\n           switch (subject) {\r\n               case 'matematyka':\r\n                   switch (type) {\r\n                       case 'mnozenie':\r\n                           setExercisesList(mathMultiplicationGenerateExercises(max, i, j))\r\n                           break;\r\n                       case 'mnozenie-liczba':\r\n                           setExercisesList(mathMultiplicationSpecificNumberGenerateExercises(max, i, j))\r\n                           break;\r\n                       default:\r\n                           break;\r\n                   }\r\n                   break;\r\n               case 'polski':\r\n                   switch (type) {\r\n                       case 'czytanie':\r\n                           setExercisesList(polishReadingExercises(max))\r\n                           break;\r\n                       default: break;\r\n                   }\r\n                   break;\r\n               default:\r\n                   break;\r\n           }\r\n        }\r\n\r\n        const handleActiveExercise = () => {\r\n            setAnswer('')\r\n            setChecked(false)\r\n            setExercise(_.sample(exercisesList))\r\n        }\r\n\r\n        const postVisit = async () => {\r\n            const {data} = await axios.post(`${API_URL()}dashboard/visit`, {userId})\r\n            setVisit(data.id)\r\n        }\r\n\r\n        //TODO dodac dla j.polskiego !!!!!!!!!!!!!\r\n        const postAnswer = async (text) => {\r\n            const {data} = await axios.post(`${API_URL()}/dashboard/answer`,{\r\n                category: routerParams.category,\r\n                subcategory: routerParams.subcategory,\r\n                text: text,\r\n                answer: answer,\r\n                isCorrect: isAnswerCorrect(),\r\n                visitId: visit\r\n            })\r\n            console.log(data)\r\n        }\r\n\r\n        // *** HOOKS\r\n        // * useEffect\r\n        useEffect(()=>{\r\n            (async ()=>{\r\n                if(userId){\r\n                    await postVisit()\r\n                }\r\n            })()\r\n        },[userId])\r\n\r\n        useEffect(()=>{\r\n            if(!userId){\r\n                setUserId(routerParams.userId)\r\n            }\r\n        },[routerParams])\r\n\r\n        useEffect(()=>{\r\n            handleActiveExercise()\r\n        },[exercisesList])\r\n\r\n        useEffect(()=>{\r\n            setChecked(false)\r\n        },[answer])\r\n\r\n        useEffect(()=>{\r\n            if(isAnswerCorrect()) {\r\n                setTimeout(handleActiveExercise,1000)\r\n            }\r\n        },[checked])\r\n\r\n    return(\r\n            <Context.Provider value={{\r\n                data: {\r\n                    userId,\r\n                    exercise,\r\n                    correctAnswer,\r\n                    answer,\r\n                    checked,\r\n                    isAnswerCorrect: isAnswerCorrect(),\r\n                    answerClass: answerClass()\r\n                },\r\n                methods: {\r\n                    setUserId,\r\n                    handleGenerateExercises,\r\n                    setCorrectAnswer,\r\n                    setAnswer,\r\n                    setChecked,\r\n                    handleActiveExercise,\r\n                    setRouterParams,\r\n                    postAnswer\r\n                },\r\n                constants: {\r\n                    API_URL: API_URL()\r\n                }\r\n            }}>\r\n                {props.children}\r\n            </Context.Provider>\r\n        )\r\n\r\n}\r\n\r\nexport default MyProvider;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport MyProvider from \"./Provider\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <MyProvider>\n          {/*TODO przekazac dane do APP przez propsy nie contextdata jak teraz*/}\n          {/*TODO Moze opakowac dodatkowym contenerem*/}\n          <App />\n      </MyProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}